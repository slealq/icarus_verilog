/* Generated by Yosys 0.7+655 (git sha1 d36d1193, gcc 8.1.1 -march=x86-64 -mtune=generic -O2 -fstack-protector-strong -fno-plt -fPIC -Os) */

(* src = "mux.v:2" *)
module mux_estructural(clk, reset_L, data_0, data_1, valid_0, valid_1, valid_out, data_out);
  (* src = "mux.v:35" *)
  wire [3:0] _00_;
  (* src = "mux.v:35" *)
  wire _01_;
  (* src = "mux.v:21" *)
  wire _02_;
  (* src = "mux.v:45" *)
  wire _03_;
  wire [3:0] _04_;
  wire [3:0] _05_;
  wire [3:0] _06_;
  wire [3:0] _07_;
  (* src = "mux.v:3" *)
  input clk;
  (* src = "mux.v:5" *)
  input [3:0] data_0;
  (* src = "mux.v:6" *)
  input [3:0] data_1;
  (* init = 4'h0 *)
  (* src = "mux.v:10" *)
  output [3:0] data_out;
  reg [3:0] data_out = 4'h0;
  (* src = "mux.v:4" *)
  input reset_L;
  (* init = 1'h0 *)
  (* src = "mux.v:13" *)
  reg selector = 1'h0;
  (* src = "mux.v:7" *)
  input valid_0;
  (* src = "mux.v:8" *)
  input valid_1;
  (* src = "mux.v:9" *)
  output valid_out;
  assign _00_[0] = reset_L ? (* src = "mux.v:44" *) _07_[0] : _04_[0];
  assign _00_[1] = reset_L ? (* src = "mux.v:44" *) _07_[1] : _04_[1];
  assign _00_[2] = reset_L ? (* src = "mux.v:44" *) _07_[2] : _04_[2];
  assign _00_[3] = reset_L ? (* src = "mux.v:44" *) _07_[3] : _04_[3];
  assign _02_ = selector ? (* src = "mux.v:25" *) valid_0 : valid_1;
  assign valid_out = reset_L ? (* src = "mux.v:24" *) _02_ : 1'h0;
  assign _01_ = reset_L ? (* src = "mux.v:44" *) _03_ : 1'h0;
  assign _04_[0] = reset_L ? (* src = "mux.v:38" *) data_out[0] : 1'h0;
  assign _04_[1] = reset_L ? (* src = "mux.v:38" *) data_out[1] : 1'h0;
  assign _04_[2] = reset_L ? (* src = "mux.v:38" *) data_out[2] : 1'h0;
  assign _04_[3] = reset_L ? (* src = "mux.v:38" *) data_out[3] : 1'h0;
  assign _05_[0] = valid_1 ? (* src = "mux.v:51" *) data_1[0] : _04_[0];
  assign _05_[1] = valid_1 ? (* src = "mux.v:51" *) data_1[1] : _04_[1];
  assign _05_[2] = valid_1 ? (* src = "mux.v:51" *) data_1[2] : _04_[2];
  assign _05_[3] = valid_1 ? (* src = "mux.v:51" *) data_1[3] : _04_[3];
  assign _06_[0] = valid_0 ? (* src = "mux.v:47" *) data_0[0] : _04_[0];
  assign _06_[1] = valid_0 ? (* src = "mux.v:47" *) data_0[1] : _04_[1];
  assign _06_[2] = valid_0 ? (* src = "mux.v:47" *) data_0[2] : _04_[2];
  assign _06_[3] = valid_0 ? (* src = "mux.v:47" *) data_0[3] : _04_[3];
  assign _07_[0] = selector ? (* src = "mux.v:46" *) _06_[0] : _05_[0];
  assign _07_[1] = selector ? (* src = "mux.v:46" *) _06_[1] : _05_[1];
  assign _07_[2] = selector ? (* src = "mux.v:46" *) _06_[2] : _05_[2];
  assign _07_[3] = selector ? (* src = "mux.v:46" *) _06_[3] : _05_[3];
  assign _03_ = ~(* src = "mux.v:45" *) selector;
  (* src = "mux.v:35" *)
  always @(posedge clk)
      data_out[0] <= _00_[0];
  (* src = "mux.v:35" *)
  always @(posedge clk)
      data_out[1] <= _00_[1];
  (* src = "mux.v:35" *)
  always @(posedge clk)
      data_out[2] <= _00_[2];
  (* src = "mux.v:35" *)
  always @(posedge clk)
      data_out[3] <= _00_[3];
  (* src = "mux.v:35" *)
  always @(posedge clk)
      selector <= _01_;
endmodule

(* top =  1  *)
(* src = "mux_41.v:4" *)
module mux_41_estructural(clk, reset_L, data_0, data_1, data_2, data_3, valid_0, valid_1, valid_2, valid_3, data_out, valid_out);
  (* src = "mux_41.v:5" *)
  input clk;
  (* src = "mux_41.v:7" *)
  input [3:0] data_0;
  (* src = "mux_41.v:8" *)
  input [3:0] data_1;
  (* src = "mux_41.v:9" *)
  input [3:0] data_2;
  (* src = "mux_41.v:10" *)
  input [3:0] data_3;
  (* src = "mux_41.v:15" *)
  output [3:0] data_out;
  (* src = "mux_41.v:19" *)
  wire [3:0] from_muxA_to_muxC;
  (* src = "mux_41.v:20" *)
  wire [3:0] from_muxB_to_muxC;
  (* src = "mux_41.v:6" *)
  input reset_L;
  (* src = "mux_41.v:11" *)
  input valid_0;
  (* src = "mux_41.v:21" *)
  wire valid_0_muxC;
  (* src = "mux_41.v:12" *)
  input valid_1;
  (* src = "mux_41.v:22" *)
  wire valid_1_muxC;
  (* src = "mux_41.v:13" *)
  input valid_2;
  (* src = "mux_41.v:14" *)
  input valid_3;
  (* src = "mux_41.v:16" *)
  output valid_out;
  (* src = "mux_41.v:24" *)
  mux_estructural muxA (
    .clk(clk),
    .data_0(data_0),
    .data_1(data_1),
    .data_out(from_muxA_to_muxC),
    .reset_L(reset_L),
    .valid_0(valid_0),
    .valid_1(valid_1),
    .valid_out(valid_0_muxC)
  );
  (* src = "mux_41.v:25" *)
  mux_estructural muxB (
    .clk(clk),
    .data_0(data_2),
    .data_1(data_3),
    .data_out(from_muxB_to_muxC),
    .reset_L(reset_L),
    .valid_0(valid_2),
    .valid_1(valid_3),
    .valid_out(valid_1_muxC)
  );
  (* src = "mux_41.v:26" *)
  mux_estructural muxC (
    .clk(clk),
    .data_0(from_muxA_to_muxC),
    .data_1(from_muxB_to_muxC),
    .data_out(data_out),
    .reset_L(reset_L),
    .valid_0(valid_0_muxC),
    .valid_1(valid_1_muxC),
    .valid_out(valid_out)
  );
endmodule
