/* Generated by Yosys 0.7+655 (git sha1 d36d1193, gcc 8.1.1 -march=x86-64 -mtune=generic -O2 -fstack-protector-strong -fno-plt -fPIC -Os) */

(* src = "word_operation_est.v:1" *)
module \$paramod\word_operation_est\BUS_SIZE=32\WORD_SIZE=4\WORD_NUM=8 (clk, reset, word_in, word_out, word_control_out);
  (* src = "word_operation_est.v:12" *)
  wire _00_;
  (* src = "word_operation_est.v:12" *)
  wire [3:0] _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  (* src = "word_operation_est.v:6" *)
  input clk;
  (* src = "word_operation_est.v:7" *)
  input reset;
  (* src = "word_operation_est.v:10" *)
  output word_control_out;
  (* src = "word_operation_est.v:8" *)
  input [3:0] word_in;
  (* src = "word_operation_est.v:9" *)
  output [3:0] word_out;
  NAND _10_ (
    .A(word_in[0]),
    .B(reset),
    .Y(_02_)
  );
  NOT _11_ (
    .A(_02_),
    .Y(_01_[0])
  );
  NAND _12_ (
    .A(word_in[1]),
    .B(reset),
    .Y(_03_)
  );
  NOT _13_ (
    .A(_03_),
    .Y(_01_[1])
  );
  NAND _14_ (
    .A(reset),
    .B(word_in[2]),
    .Y(_04_)
  );
  NOT _15_ (
    .A(_04_),
    .Y(_01_[2])
  );
  NAND _16_ (
    .A(reset),
    .B(word_in[3]),
    .Y(_05_)
  );
  NOT _17_ (
    .A(_05_),
    .Y(_01_[3])
  );
  NOR _18_ (
    .A(word_in[2]),
    .B(word_in[3]),
    .Y(_06_)
  );
  NOR _19_ (
    .A(word_in[1]),
    .B(word_in[0]),
    .Y(_07_)
  );
  NAND _20_ (
    .A(_06_),
    .B(_07_),
    .Y(_08_)
  );
  NAND _21_ (
    .A(reset),
    .B(_08_),
    .Y(_09_)
  );
  NOT _22_ (
    .A(_09_),
    .Y(_00_)
  );
  (* src = "word_operation_est.v:12" *)
  DFF _23_ (
    .C(clk),
    .D(_00_),
    .Q(word_control_out)
  );
  (* src = "word_operation_est.v:12" *)
  DFF _24_ (
    .C(clk),
    .D(_01_[0]),
    .Q(word_out[0])
  );
  (* src = "word_operation_est.v:12" *)
  DFF _25_ (
    .C(clk),
    .D(_01_[1]),
    .Q(word_out[1])
  );
  (* src = "word_operation_est.v:12" *)
  DFF _26_ (
    .C(clk),
    .D(_01_[2]),
    .Q(word_out[2])
  );
  (* src = "word_operation_est.v:12" *)
  DFF _27_ (
    .C(clk),
    .D(_01_[3]),
    .Q(word_out[3])
  );
endmodule

(* top =  1  *)
(* src = "block_est.v:1" *)
module block_est(clk, reset, data_in, error, data_out, word_bus);
  (* src = "block_est.v:7" *)
  input clk;
  (* src = "block_est.v:9" *)
  input [31:0] data_in;
  (* src = "block_est.v:11" *)
  output [31:0] data_out;
  (* src = "block_est.v:10" *)
  output error;
  (* src = "block_est.v:8" *)
  input reset;
  (* src = "block_est.v:12" *)
  output [7:0] word_bus;
  (* src = "block_est.v:19" *)
  word_cluster_est wc_cond (
    .clk(clk),
    .data_in(data_in),
    .data_out(data_out),
    .reset(reset),
    .word_bus(word_bus)
  );
endmodule

(* src = "word_cluster_est.v:1" *)
module word_cluster_est(clk, reset, data_in, data_out, word_bus);
  (* src = "word_cluster_est.v:6" *)
  input clk;
  (* src = "word_cluster_est.v:8" *)
  input [31:0] data_in;
  (* src = "word_cluster_est.v:9" *)
  output [31:0] data_out;
  (* src = "word_cluster_est.v:7" *)
  input reset;
  (* src = "word_cluster_est.v:10" *)
  output [7:0] word_bus;
  (* src = "word_cluster_est.v:18" *)
  \$paramod\word_operation_est\BUS_SIZE=32\WORD_SIZE=4\WORD_NUM=8  \CLUSTER[0].cluster_unit  (
    .clk(clk),
    .reset(reset),
    .word_control_out(word_bus[0]),
    .word_in(data_in[3:0]),
    .word_out(data_out[31:28])
  );
  (* src = "word_cluster_est.v:18" *)
  \$paramod\word_operation_est\BUS_SIZE=32\WORD_SIZE=4\WORD_NUM=8  \CLUSTER[1].cluster_unit  (
    .clk(clk),
    .reset(reset),
    .word_control_out(word_bus[1]),
    .word_in(data_in[7:4]),
    .word_out(data_out[27:24])
  );
  (* src = "word_cluster_est.v:18" *)
  \$paramod\word_operation_est\BUS_SIZE=32\WORD_SIZE=4\WORD_NUM=8  \CLUSTER[2].cluster_unit  (
    .clk(clk),
    .reset(reset),
    .word_control_out(word_bus[2]),
    .word_in(data_in[11:8]),
    .word_out(data_out[23:20])
  );
  (* src = "word_cluster_est.v:18" *)
  \$paramod\word_operation_est\BUS_SIZE=32\WORD_SIZE=4\WORD_NUM=8  \CLUSTER[3].cluster_unit  (
    .clk(clk),
    .reset(reset),
    .word_control_out(word_bus[3]),
    .word_in(data_in[15:12]),
    .word_out(data_out[19:16])
  );
  (* src = "word_cluster_est.v:18" *)
  \$paramod\word_operation_est\BUS_SIZE=32\WORD_SIZE=4\WORD_NUM=8  \CLUSTER[4].cluster_unit  (
    .clk(clk),
    .reset(reset),
    .word_control_out(word_bus[4]),
    .word_in(data_in[19:16]),
    .word_out(data_out[15:12])
  );
  (* src = "word_cluster_est.v:18" *)
  \$paramod\word_operation_est\BUS_SIZE=32\WORD_SIZE=4\WORD_NUM=8  \CLUSTER[5].cluster_unit  (
    .clk(clk),
    .reset(reset),
    .word_control_out(word_bus[5]),
    .word_in(data_in[23:20]),
    .word_out(data_out[11:8])
  );
  (* src = "word_cluster_est.v:18" *)
  \$paramod\word_operation_est\BUS_SIZE=32\WORD_SIZE=4\WORD_NUM=8  \CLUSTER[6].cluster_unit  (
    .clk(clk),
    .reset(reset),
    .word_control_out(word_bus[6]),
    .word_in(data_in[27:24]),
    .word_out(data_out[7:4])
  );
  (* src = "word_cluster_est.v:18" *)
  \$paramod\word_operation_est\BUS_SIZE=32\WORD_SIZE=4\WORD_NUM=8  \CLUSTER[7].cluster_unit  (
    .clk(clk),
    .reset(reset),
    .word_control_out(word_bus[7]),
    .word_in(data_in[31:28]),
    .word_out(data_out[3:0])
  );
endmodule
